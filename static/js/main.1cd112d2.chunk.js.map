{"version":3,"sources":["utils.ts","components/TopicListContainer.tsx","App.tsx","consts.ts","reportWebVitals.ts","index.tsx"],"names":["formatDate","timestamp","tempData","Date","getFullYear","getMonth","getDate","getCurrentTimeStamp","now","getTimezoneOffset","getTime","TopicListContainer","props","dateString","this","date","topics","className","length","map","t","href","url","title","id","React","Component","App","state","isFetching","dailyTopics","currentTimestamp","utils","formatDateString","rawDataFilePath","fetch","res","json","setState","concat","console","error","d","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAIO,SAASA,EAAWC,GACzB,IAAMC,EAAW,IAAIC,KAAKF,GAE1B,MAAM,GAAN,OAAUC,EAASE,cAAnB,YAAoCF,EAASG,WAAW,EAAxD,YAA6DH,EAASI,WAIjE,SAASC,IAGd,OAFoB,IAAIJ,KAAKA,KAAKK,MAOQ,IAAlC,IAAIL,MAAQM,oBAA2B,KAL5BC,U,UCLAC,E,kDAGnB,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAHDA,WAEmB,EAExB,EAAKA,MAAQA,EAFW,E,qDAMxB,IAAMC,EAAqBC,KAAKF,MAAMG,KAChCC,EAAkBF,KAAKF,MAAMI,OAEnC,OACE,sBAAKC,UAAU,mBAAf,UACE,mBAAGA,UAAU,YAAb,SAA0BJ,IACP,IAAlBG,EAAOE,OACN,mBAAGD,UAAU,YAAb,sCAEAD,EAAOG,KAAI,SAACC,GAAD,OACT,qBAAKH,UAAU,kBAAf,SACE,mBAAGA,UAAU,GAAGI,KAAMD,EAAEE,IAAxB,SACGF,EAAEG,SAF+BH,EAAEI,c,GAnBJC,IAAMC,WCkEvCC,E,kDAvDb,WAAYf,GAAa,IAAD,8BACtB,cAAMA,IATDgB,WAQiB,EAGtB,EAAKA,MAAQ,CACXC,YAAY,EACZC,YAAa,IALO,E,wLAUlBC,EAAmBC,I,YAEhBD,EAAmB,IAAI5B,KCxBY,cDwBiBO,W,wBACnDuB,EAAmBD,EAAiBD,GACpCG,EC7BqB,kFD6BiBD,EAAmB,Q,kBAG3CE,MAAMD,G,cAAlBE,E,YAEEH,E,UACQG,EAAIC,O,oBAFdP,E,CACJf,K,KACAC,O,MAGFF,KAAKwB,SAAS,CACZR,YAAahB,KAAKc,MAAME,YAAYS,OAAOT,K,kDAG7CU,QAAQC,MAAR,M,QAGFV,GCvCwC,M,uBD0C1CjB,KAAKwB,SAAS,CACZT,YAAY,I,+IAKd,OACE,sBAAKZ,UAAU,iBAAf,UACE,wBAAQA,UAAU,cAAlB,2CACCH,KAAKc,MAAME,YAAYX,KAAI,SAACuB,GAAD,OAC1B,cAAC,EAAD,CAEE1B,OAAQ0B,EAAE1B,OACVD,KAAM2B,EAAE3B,MAFH2B,EAAE3B,SAKVD,KAAKc,MAAMC,YAAc,yE,GA1DhBJ,IAAMC,WEGTiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1cd112d2.chunk.js","sourcesContent":["/**\r\n * 根据时间戳返回特殊格式化后的字符串，例如 2020-12-21\r\n * @param timestamp 时间戳，单位毫秒\r\n */\r\nexport function formatDate(timestamp: number): string{\r\n  const tempData = new Date(timestamp);\r\n\r\n  return `${tempData.getFullYear()}-${tempData.getMonth()+1}-${tempData.getDate()}`\r\n}\r\n\r\n/** 返回此时时间戳，以毫秒为单位 */\r\nexport function getCurrentTimeStamp(): number {\r\n  const currentDate = new Date(Date.now() + getTimezoneMsOffset());\r\n\r\n  return currentDate.getTime();\r\n}\r\n\r\n/** 返回时区差值，以毫秒为单位 */\r\nexport function getTimezoneMsOffset(): number {\r\n  return (new Date()).getTimezoneOffset() * 60 * 1000;\r\n}\r\n","import React from \"react\";\r\nimport \"../css/topic-list-container.css\";\r\nimport { Topic } from \"../types\";\r\n\r\ntype Props = {\r\n  date: string;\r\n  topics: Topic[];\r\n};\r\n\r\nexport default class TopicListContainer extends React.Component {\r\n  public props: Props;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n\r\n  public render() {\r\n    const dateString: string = this.props.date;\r\n    const topics: Topic[] = this.props.topics;\r\n\r\n    return (\r\n      <div className=\"topics-container\">\r\n        <p className=\"date-text\">{dateString}</p>\r\n        {topics.length === 0 ? (\r\n          <p className=\"null-text\">空空如也</p>\r\n        ) : (\r\n          topics.map((t) => (\r\n            <div className=\"topic-container\" key={t.id}>\r\n              <a className=\"\" href={t.url}>\r\n                {t.title}\r\n              </a>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./css/app.css\";\nimport { Topic } from \"./types\";\nimport * as utils from \"./utils\";\nimport TopicListContainer from \"./components/TopicListContainer\";\nimport {\n  RAW_JSON_BASE_URL,\n  SCRIPT_BEGIN_TIMESTAMP,\n  DAY_MILLISECONDS_COUNT,\n} from \"./consts\";\n\nclass App extends React.Component {\n  public state: {\n    isFetching: boolean;\n    dailyTopics: {\n      date: string;\n      topics: Topic[];\n    }[];\n  };\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      isFetching: true,\n      dailyTopics: [],\n    };\n  }\n\n  async componentDidMount() {\n    let currentTimestamp = utils.getCurrentTimeStamp();\n\n    while (currentTimestamp > new Date(SCRIPT_BEGIN_TIMESTAMP).getTime()) {\n      const formatDateString = utils.formatDate(currentTimestamp);\n      const rawDataFilePath = RAW_JSON_BASE_URL + formatDateString + \".json\";\n\n      try {\n        const res = await fetch(rawDataFilePath);\n        const dailyTopics = {\n          date: formatDateString,\n          topics: await res.json(),\n        };\n\n        this.setState({\n          dailyTopics: this.state.dailyTopics.concat(dailyTopics),\n        });\n      } catch (error) {\n        console.error(error);\n      }\n\n      currentTimestamp -= DAY_MILLISECONDS_COUNT;\n    }\n\n    this.setState({\n      isFetching: false,\n    });\n  }\n\n  public render() {\n    return (\n      <div className=\"page-container\">\n        <header className=\"header-text\">V2EX 热点主题</header>\n        {this.state.dailyTopics.map((d) => (\n          <TopicListContainer\n            key={d.date}\n            topics={d.topics}\n            date={d.date}\n          ></TopicListContainer>\n        ))}\n        {this.state.isFetching && <p>获取数据中...</p>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/**\r\n * Use for set some of const varible.\r\n */\r\n\r\n/** 数据文件url前缀 */\r\nexport const RAW_JSON_BASE_URL = \"https://raw.githubusercontent.com/realLeonardo/v2ex-daily-hot-topic/master/raw/\"\r\n\r\n/** 数据爬虫开始日期 */\r\nexport const SCRIPT_BEGIN_TIMESTAMP: string = \"2020/12/18\"\r\n\r\n/** 一天的毫秒数 */\r\nexport const DAY_MILLISECONDS_COUNT: number = 24 * 60 * 60 * 1000;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}